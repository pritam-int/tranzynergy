<?php
    /***
    * hook_init
    ***/
    function create_invoice_init() {
      drupal_add_js(drupal_get_path('module', 'create_invoice') .'/js/create_invoice.js');
      drupal_add_css(drupal_get_path('module', 'create_invoice') .'/css/create_invoice.css');
      
      }
      
    /**	* Implementation of hook_permission().
	*/
	function create_invoice_permission() {
	  // Restrict access to either of your new URLs.
	  return array(
	    'access invoice page' => array(
	      'title' => t('Access invoice page'),
	      'description' => t('Allow users to access invoice page'),
	    ),
	  );
	}
	   
    
    /***
    * hook_menu
    ***/
    function create_invoice_menu() {        
            $items = array();            
            $items['create_invoice/%'] = array(
		    'page callback' => 'drupal_get_form',
		    'page arguments' => array('add_invoice'),
		    'access arguments' => array('access invoice page'),
		    'access callback' => 'user_access',
                    'type' => MENU_CALLBACK,
            );
	    
	    $items['edit_invoice/%'] = array(
	    'title' => t('Edit Invoice'),
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('invoice_edit', 1),
	    'access arguments' => array('access invoice page'),
	    'access callback' => 'user_access',
	    'type' => MENU_CALLBACK,
	    );

            return $items;
    }
    
    /***
    * function to create invoice
    ***/
    function add_invoice() {
      global $base_url;
      $field_count = $field_rate = 0;
      
      $job_id = arg(1);
      $job_id = decr($job_id);      
      $job_array  = node_load($job_id);
      
      $query = "SELECT entity_id FROM 
	      {field_data_field_job_assigned } 	     
	      WHERE ((field_job_assigned_nid = '".$job_id."') AND (deleted = '0'))";
      $result = returnArrayOfObject($query);
      
      $job_assigned_to =  array();
      foreach($result AS $key => $values) {
      
      $job_resource_nid = $values->entity_id;
      $job_res_array  = node_load($job_resource_nid);
     
      $job_assigned_to[$key]['uid'] = $job_res_array->field_member['und'][0]['uid'];
      
     }
      
      if(!empty($job_array->field_rate)) $field_rate = $job_array->field_rate['und'][0]['value'];
      if(!empty($job_array->field_final_word_count)) $field_count = $job_array->field_final_word_count['und'][0]['value'];
      $total_amount += ($field_count*$field_rate); // Amount added static
       
      $invoice_title = $job_array->title."-Invoice ";
     
      $current_date = date("Y-m-d");      
      $job_node_id = $job_array->nid;      
      $invoice_date = $current_date;
      
      /***********************************************************************************/
      $node = new stdClass();
      $node->title = $invoice_title;		
      $node->type = 'invoice';		
      $node->language = LANGUAGE_NONE;
      $node->created = time();
      $node->log = t('Invoice created: '.$node->title);

      node_object_prepare($node); //sets up all the default values

      $node->field_job['und'][0]['nid'] = $job_node_id;
      $node->field_date_of_invoice['und'][0]['value'] = $invoice_date;
      $node->field_for_the_user['und'] = $job_assigned_to;
      $node->field_amount['und'][0]['value']= $total_amount;      
      node_save($node);
      
      /********* Update Job node to update status ***********************/
      $node_job = node_load($job_id);
      $node_job->field_job_status['und'][0]['value']= 5;
      node_save($node_job);
      /********************************/

      //structure the notification message		  
      $output = t("A new Invoice @name has been added successfully.", array(
	'@name' => $node->title,
	)
      );
       
      drupal_set_message($output);
      
      //Generate the PDF invoice using job nid
      generate_pdf_invoice_report($job_id);
      
      drupal_goto('user-dashboard');      
      /***********************************************************************************/
    }
    
    /***
     * function to create edit job resource form
    ***/
    function invoice_edit($form, &$form_state, $jrid) {
    	
    	$job_resource_array = node_load($jrid);
	
    	//prepare user dropdown
    	$users = entity_load('user');    
    	$user_options=array();
	
    	foreach($users as $key => $val){
	  if($val->uid!=0){
	    $user_options[$val->uid] = $val->name;
	  }
    	}
    
    	//prepare jobs dropdown
    	$result_job = db_select('node', 'n')
    	->fields('n', array('nid','title'))
    	->condition('type', 'job','=')
    	->execute();
    
    	$job_options=array();    
    	while($arr_job = $result_job->fetchAssoc()){    
    	  $job_options[$arr_job['nid']] = $arr_job['title'];
    	}
	
    	$form = array();    
    	$form['job_resource_title'] = array(
	  '#type' => 'textfield',
	  '#title' => t('Job Resource Title'),
	  '#default_value' => $job_resource_array->title,
	  '#size' => 40,
	  '#required' => true,
    	);
    
    	$form['description'] = array(
	  '#type' => 'textarea',
	  '#title' => t('Description'),
	  '#default_value' => $job_resource_array->body['und'][0]['value'],
	  '#cols' => 30,
	  '#rows' => 5,
    	);
    
    	$form['work_done_by'] = array(
	  '#type' => 'select',
	  '#title' => t('Work Done By'),
	  '#options' => $user_options,    			
	  '#default_value' => $job_resource_array->field_member['und'][0]['uid'],
    	);
    
    	$form['job_assigned'] = array(
	  '#type' => 'select',
	  '#title' => t('Job Assigned'),
	  '#options' => $job_options,
	  '#default_value' => $job_resource_array->field_job_assigned['und'][0]['nid'],
    	);
    
    	$form['rate'] = array(
	  '#type' => 'textfield',
	  '#title' => t('Rate'),
	  '#default_value' => $job_resource_array->field_rate['und'][0]['value'],
	  '#size' => 20,
    	);
    
    	$form['count'] = array(
	  '#type' => 'textfield',
	  '#title' => t('Count'),
	  '#default_value' => $job_resource_array->field_count['und'][0]['value'],
	  '#size' => 20,
    	);
    	
    	$form['jrid'] = array(
	  '#type' => 'hidden',
	  '#title' => t('Job Resource Id'),
	  '#default_value' => $jrid,
	  '#size' => 40,
    	);
    
    	$form['submit'] = array (
	  '#prefix' => '<div id="job_submit">',
	  '#type' => 'submit',
	  '#value' => 'Submit',
	  '#suffix' => '</div>'
    	);
    
    	return $form;
    }
    
     /***
    * hook_form_validate
    ***/
    function add_invoice_validate($form, &$form_state) {
      
    }
    
     /***
    * hook_submit
    ***/
    function add_invoice_submit($form, &$form_state) {
      
	$job_resource_title = trim($form_state['values']['job_resource_title']);
	$description = trim($form_state['values']['description']);	
	$work_done_by = trim($form_state['values']['work_done_by']);		
	$job_assigned = trim($form_state['values']['job_assigned']);		
	$rate = $form_state['values']['rate'];
	$count = $form_state['values']['count'];
	
	$node = new stdClass();
	$node->title = $job_resource_title;		
	$node->type = 'job_resource';		
	$node->language = LANGUAGE_NONE;
	$node->created = time();
	$node->log = t('Job resource created: '.$node->title);

	node_object_prepare($node); //sets up all the default values
	
	$node->body['und'][0]['value'] = $description;
	$node->field_member['und'][0]['uid'] = $work_done_by;
	$node->field_job_assigned['und'][0]['nid'] = $job_assigned;
	$node->field_rate['und'][0]['value'] = $rate;
	$node->field_count['und'][0]['value'] = $count;
	node_save($node);

	//structure the notification message		  
	$output = t("A new job resource @name has been added successfully.", array(
	'@name' => $job_resource_title,		      
	)
	);
	 
	drupal_set_message($output);
    }
    
    
    function invoice_edit_submit($form, &$form_state){
    	
    	//load the existing node
    	$node = node_load($form_state['values']['jrid']);
    	
    	$job_resource_title = trim($form_state['values']['job_resource_title']);
    	$description = trim($form_state['values']['description']);
    	$work_done_by = trim($form_state['values']['work_done_by']);
    	$job_assigned = trim($form_state['values']['job_assigned']);
    	$rate = $form_state['values']['rate'];
    	$count = $form_state['values']['count'];
    	
    	$node->title = $job_resource_title;
    	$node->type = 'job_resource';
    	$node->language = LANGUAGE_NONE;
    	$node->created = time();
    	$node->log = t('Job resource edited: '.$node->title);
    	
    	$node->body['und'][0]['value'] = $description;
    	$node->field_member['und'][0]['uid'] = $work_done_by;
    	$node->field_job_assigned['und'][0]['nid'] = $job_assigned;
    	$node->field_rate['und'][0]['value'] = $rate;
    	$node->field_count['und'][0]['value'] = $count;    	
    	node_save($node);
    	
    	//structure the notification message
    	$output = t("A new job resource @name has been updated successfully.", array(
	  '@name' => $job_resource_title,
	  )
    	);
    	
    	drupal_set_message($output);
    }